# This file contains the static part of the configuration of SOGI-GW. 
# Changes here require restart of the SOSI-GW cluster to take effect!
# (Get them right, right from the start...)

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# NOTE! Some settings in this file MUST be changed on initial installation 
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# cluster.ip.prefix decides which interface to run the intra-cluster
# communication on. If unset, bind all interfaces.  It is recommended
# to run the intra-cluster communication on at least a seperate
# IP-subnet, and preferably on a separate VLAN / LAN Default:
# none. Must be set to run sosigw. 
# Typical examples are "10.", "192.168.", "172.17.", ...
cluster.ip.prefix=

# cluster.multicast.ip.address: Intra-cluster multicast address. Must
# be unique for each SOSI-GW cluster in combination with the port.
# Default: 224.0.2.7
cluster.multicast.ip.address=224.0.2.7

# Port on which to run the intra-cluster multicasts. Keep it out of
# the range where ports are randomly selected.  
# Default: 3456.
cluster.multicast.ip.port=3456

########### SOSI-GW modes of operation.
#
# Developer mode.
#
# Provided as an easy way of getting a SOSI-GW running locally for
# developers of systems using SOSI-GW.  Disables the use of databases,
# auditlogging, clustering, and login-checking for the console.  Also
# disables access checking on webservices, both client and server
# ends.  Note that the runtime configuration set through the console
# is not saved across sessions in this mode.  Uses the TEST-STS
# service. Does not communicate with other cluster members at all.
#
#sosigw.mode=developer
#
#
# Test mode. 
#
# Like production mode except for the use of the TEST STS service
# instead of the production STS.
#
#sosigw.mode=test
#
#
# bootstrap restricted mode.
#
# Makes SOSI-GW start in a restricted mode, in which only the console
# is available and where the console does not require authorization.
# It is meant for initial bootstrapping of the first SOSI-GW
# server/cluster and for emergency rescue of a server/cluster where no
# valid login is available.  Does require the local database to store
# the configuration created through the console.  It is not possible
# to use the gateway as a proxy for webservice requests while in this
# mode.  Does not use any STS at all. Does not communicate with other
# cluster members at all.
#
#sosigw.mode=bootstrap
#
#
# Production mode. 
#
# Enables full functionality and uses the production STS service.
# Requires the local and global databases to be correctly configured
# and runs in a cluster, if more than one node is present.
#
#sosigw.mode=production
#
###########

# Default mode is developer. Sysadm have to modify this file anyway.
sosigw.mode=developer


###########
# Cluster Tuning parameters. Most likely best left alone...
#
# Max size in bytes of message carried. Decides buffer sizes.
# Default: 60000
#cluster.tuningparam.max.message.size=60000
#
# How many ms to wait when making tcp connection to peer for resync. 
# Fairly low, as there is no point in trying hard to sync to someone not wanting it.
# Default: 2000
#cluster.tuningparam.resync.connect.timeout=2000
#
# How many ms to wait for data to read on resync socket
# Default: 5000
#cluster.tuningparam.resync.receive.timeout=5000
#
# How many ms to sleep between periodic pings to other members.
# Default: 1000
#cluster.tuningparam.periodic.alive.interval=1000
#
# How many ping packets to miss before we log a warning that a peer has gone.
# Default: 5
#cluster.tuningparam.warn.peer.silent.times=5
#
# How many ping packets to miss before we remove all state related to a peer.
# If he should happen to reapper after this, we consider him brand new.
# Default: 300
#cluster.tuningparam.remove.peer.silent.times=300
#
# How many threads to spawn, processing incoming messages on multicast socket.
# Also sets the number of listening threads on the resync socket.
# Default: 5
#cluster.tuningparam.receiver.thread.count=5
#
# How many nameIDs to keep mapped by sequence number, to allow fast resync with peers
# When a peer is more than this window out of sync, the entire state is sent to the peer.
# Default: 1000
#cluster.tuningparam.sent.window.width=1000
#
# How many connections are allowed to be queued on the resync-socket. 
# Note that the other end gives up after a while; see resync.connect.timeout.
# Default: 5
#cluster.tuningparam.resync.socket.backlog=5
#
# Do we have accurate, continuous time on all nodes in the cluster?
# If set to "1", we do not try to estimate time skew among peers, but trust
# the local clock to be accurate to a few milliseconds precision.
# If set to "0" (default) we use the pings to adjust the timestamp of incoming messages.
# Note that it is still fatal to the shared state, if a cluster members performs "time travel",
# such as setting the clock back or forward more than a few ms each second. 
# All clock adjustments must be formed by slowly sliding the current time...
# Default: 0
#cluster.tuningparam.acurate.time.flow=0
#
# Number of ping packets to look at to decide the time offset for a peer.
# The offset is decides each time this number of packets has been received.
# Default: 15 
#cluster.tuningparam.timestate.samplewindow=15
#
# Number of ms to wait when a proxy-request arrives and we don't know the nameID.
# A small delay helps implicit login users to get the "login required" message quickly,
# but at the expense of non-sticky cluster users, who loose their just-signed IDCard. 
# Default: 500
#cluster.tuningparam.implicit.login.unknown.delay=500
#
# When a proxy request arrive and we know the nameID, but have a unsigned IDCard in the local state,
# wait a while to allow other members of the cluster to send us the card.
# If the card is revoked, we do not enter this, but act as if it was 
# unknown, see tuningparam.implicit.login.unknown.delay.
# We wait the "delay" ms and then look at the cache again, repeating this "retry" times.
# Does not happen very often. Helps users by not requiring them so sign again.
# Default: delay=100, retry=5
#cluster.tuningparam.implicit.login.unsigned.delay=100
#cluster.tuningparam.implicit.login.unsigned.retry=5
#
# Max number of connections held to each service provider host through proxy
# by this sosigw member. Keep down to prevent denial-of-service on the other end.
# Keep up to keep throughput high... (Watch out for "ulimit" on unix systems)
# Default: 400
#cluster.tuningparam.max.connections.per.host=400
#
# Max number of connections held in total to all service providers host through proxy
# by this sosigw member. Keep down to prevent denial-of-service on the other end.
# Keep up to keep throughput high... (Watch out for "ulimit" on unix systems)
# Default: 400
#cluster.tuningparam.max.connections.in.total=400
#
# Supported version of DGWS. Valid values are 1.0 and 1.0.1, and in future version
# also 1.1.  The DGWS version must match the version used by client applications. 
# Support for multiple versions in parallel can be obtained by deploying multiple 
# instances of SOSI-GW.
# Default: 1.0.1
#dgws.version=1.0.1

dgws.version=1.0.1

###########
